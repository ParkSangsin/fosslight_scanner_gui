name: Release fosslight_scanner_gui

on:
  release:
    types: [published]

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release:
    name: Build and Release ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          yarn install

      - name: Install Snapcraft (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo snap install snapcraft --classic
          echo "/snap/bin" >> $GITHUB_PATH

      - name: Build Electron app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          yarn build
        
      - name: Build artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            yarn electron-builder --linux deb appimage
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            yarn electron-builder --mac dmg zip
          else
            yarn electron-builder --win nsis zip
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.deb
            dist/*.AppImage
            dist/*.zip
          if-no-files-found: ignore

      - name: Release artifacts
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            dist/*.exe
            dist/*.dmg
            dist/*.deb
            dist/*.AppImage
            dist/*.zip
        if: startsWith(github.ref, 'refs/tags/')